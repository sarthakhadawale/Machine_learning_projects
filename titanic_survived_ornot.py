# -*- coding: utf-8 -*-
"""titanic_survived_orNot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y15xCQ8iiiV6sm0_dryMbFT8wOtPdZ7K
"""

#In this we can predict how many person survived and not survived according to dataset

from google.colab import files#here we upload file
data=files.upload()

import pandas as pd
titanic=pd.read_csv("titanic_train.csv")#Here we can read csv file

titanic.info()

titanic.head()

titanic["Pclass"].unique()

import seaborn as sns

sns.heatmap(titanic.isnull(),)

sns.countplot(x="Survived",hue="Sex",data=titanic)

"""Data cleaning"""

train=titanic[["PassengerId","Survived","Pclass","Age","SibSp","Parch","Fare"]]

train.corr()#here we can check correlation

titanic.groupby("Pclass").describe()["Age"]

def correct(res):
  Pclass=res[0]
  Age=res[1]
  if pd.isnull(Age):
    if Pclass==1:

      return 37
    elif Pclass==2:

      return 29
    elif Pclass==3:

      return 24
  else:
    return Age
#this function can fill the age their empty

titanic["Age"]=titanic[["Pclass","Age"]].apply(correct,axis=1)

titanic.info()

sns.heatmap(titanic.isnull())

titanic.info()

gender=pd.get_dummies(titanic["Sex"],drop_first=True)

titanic["Embarked"].value_counts()

titanic["Embarked"].fillna("S",inplace=True)

Embarked=pd.get_dummies(titanic["Embarked"],drop_first=True)

titanic.drop(["PassengerId","Name","Sex","Ticket","Embarked","Cabin"],axis=1,inplace=True)

titanic.info()

titanic=pd.concat([titanic,gender,Embarked],axis=1)

titanic.info()

x=titanic[["Pclass","Age","SibSp","Parch","Fare","male","Q","S"]]

y=titanic["Survived"]

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=43,test_size=0.30)

print(x_train.shape,y_train.shape,x_test.shape,
y_test.shape)

from sklearn.linear_model import LogisticRegression

lg=LogisticRegression()

lg.fit(x_train,y_train)#here we can train

prediction=lg.predict(x_test)#here we can test

print(prediction)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

print(accuracy_score(y_test,prediction))

print(confusion_matrix(y_test,prediction))

print(classification_report(y_test,prediction))